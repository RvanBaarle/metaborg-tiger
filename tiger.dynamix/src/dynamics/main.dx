module main

imports

  signatures/start-sig
  primitive
  stdlib
  types

signature
constructors
  String : string -> Exp  // TODO: this shouldn't be needed

constraint-analyzer
  property type :: 'TYPE

rules
  $unit :: @cval
  $false :: @cval
  $true :: @cval
  $break :: @cval

  evalProgram :: 'Module -> Pluggable
  evalExp :: 'Exp -> Pluggable(@cval)
  evalTypedExp :: 'Exp * List('TYPE) -> Pluggable(@cval)
  evalExps :: List('Exp) -> Pluggable(@cval)
  evalArgs :: List('Exp) -> Pluggable(List(@cval))
  evalDecl :: 'Dec -> Pluggable
  evalDecls :: List('Dec) -> Pluggable
  compileFrameEntry :: ('ID * 'TYPE) -> @cstructmember

  evalProgram(m@Mod(exp)) = {
    with $unit = int('0), $false = int('0), $true = int('1) do {
      mainframe <- create-scope!(m, ['"main!var"])
      initBuiltins(mainframe)
      evalExp(exp)
    }
  }
  
  // Control flow
  
  evalExp(Seq(exps)) = {
  	evalExps(exps)
  }
  
  evalExp(If(econd, e1, e2)) = {
  	cond <- evalExp(econd)
  	if #int-neq(cond, $false) then {
  	  r1 <- evalExp(e1)
  	  cont@([r1])
  	} else {
  	  r2 <- evalExp(e2)
  	  cont@([r2])
  	}
  } label cont/1:
  
  evalExp(IfThen(econd, e1)) = {
  	cond <- evalExp(econd)
  	if #int-neq(cond, $false) then {
  	  evalExp(e1)
  	  cont@([$unit])
  	} else {
  	  cont@([$unit])
  	}
  } label cont/1:
  
  evalExp(w@While(econd, e1)) = {
    create-scope!(w, ['"main!var"])
  	while <- fresh-var(while)
  	with $break = cont do {
  	  fix {
  	    fun while([]) = {
  	      cond <- evalExp(econd)
  	      if #int-neq(cond, $false) then {
  	        evalExp(e1)
  	        while@([])
  	      } else {
  	        cont@([$unit])
  	      }
  	    }
  	  }
  	  while@([])
  	}
  } label cont/1:
  
  evalExp(f@For(Var(x), e1, e2, ebody)) = {
    val_min <- evalExp(e1)
    val_max <- evalExp(e2)
    create-scope!(f, ['"main!var"])
    for <- fresh-var(for)
    i <- fresh-var(i)
  	with $break = cont do {
  	  fix {
  	    fun for([i]) = {
          write-var!(x, i)
  	      if #int-gt(i, val_max) then
  	        cont@([$unit])
  	      else {
  	        evalExp(ebody)
  	        i_plus <- #int-add(i, int('1))
  	        for@([i_plus])
  	      }
  	    }
  	  }
  	}
  	for@([val_min])
  } label cont/1:
  
  evalExp(Break()) = {
    $break@([$unit])
  } label unused/1:
  
  evalExp(l@Let(bindings, b@LetBody(exps))) = {
    create-scope!(l, ['"main!var"])
    evalDecls(bindings)
    create-scope!(b, ['"main!var"])
    evalExps(exps)
  }

  evalExp(Call(f_id, arg_exprs)) = {
    f <- read-var!(f_id)
    args <- evalArgs(arg_exprs)
    f@(args ++ [cont])
  } label cont/1:
  
  // Literals
  
  evalExp(Int(i)) = int(i)
  evalExp(String(x)) = str(x)
  evalExp(NilExp()) = null
  
  // Arithmetic
  
  evalExp(Uminus(e)) = {
    v <- evalExp(e)
    #int-neg(v)
  }
  
  evalExp(Times(e1, e2)) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    #int-mul(v1, v2)
  }
  
  evalExp(Divide(e1, e2)) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    #int-div(v1, v2)
  }
  
  evalExp(Plus(e1, e2)) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    #int-add(v1, v2)
  }
  
  evalExp(Minus(e1, e2)) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    #int-sub(v1, v2)
  }
  
  // Comparison
  // TODO: Comparison of other types
  evalExp(e@Eq(e1, e2)) = evalTypedExp(e, type(e1))
  evalTypedExp(Eq(e1, e2), [INT()]) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    if #int-eq(v1, v2) then {
      cont@([$true])
    } else {
      cont@([$false])
    }
  } label cont/1:
  evalTypedExp(Eq(e1, e2), [STRING()]) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    if #str-eq(v1, v2) then {
      cont@([$true])
    } else {
      cont@([$false])
    }
  } label cont/1:
  evalTypedExp(Eq(e1, e2), [_]) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    if #term-eq(v1, v2) then {
      cont@([$true])
    } else {
      cont@([$false])
    }
  } label cont/1:
  
  evalExp(e@Neq(e1, e2)) = evalTypedExp(e, type(e1))
  evalTypedExp(Neq(e1, e2), [INT()]) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    if #int-neq(v1, v2) then {
      cont@([$true])
    } else {
      cont@([$false])
    }
  } label cont/1:
  evalTypedExp(Neq(e1, e2), [STRING()]) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    if #str-neq(v1, v2) then {
      cont@([$true])
    } else {
      cont@([$false])
    }
  } label cont/1:
  evalTypedExp(Neq(e1, e2), [_]) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    if #term-eq(v1, v2) then {
      cont@([$false])
    } else {
      cont@([$true])
    }
  } label cont/1:
  
  evalExp(e@Gt(e1, e2)) = evalTypedExp(e, type(e1))
  evalTypedExp(Gt(e1, e2), [INT()]) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    if #int-gt(v1, v2) then {
      cont@([$true])
    } else {
      cont@([$false])
    }
  } label cont/1:
  evalTypedExp(Gt(e1, e2), [STRING()]) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    cmp <- #str-cmp(v1, v2)
    if #int-gt(cmp, int('0)) then {
      cont@([$true])
    } else {
      cont@([$false])
    }
  } label cont/1:
  
  evalExp(e@Lt(e1, e2)) = evalTypedExp(e, type(e1))
  evalTypedExp(Lt(e1, e2), [INT()]) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    if #int-lt(v1, v2) then {
      cont@([$true])
    } else {
      cont@([$false])
    }
  } label cont/1:
  evalTypedExp(Lt(e1, e2), [STRING()]) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    cmp <- #str-cmp(v1, v2)
    if #int-lt(cmp, int('0)) then {
      cont@([$true])
    } else {
      cont@([$false])
    }
  } label cont/1:
  
  evalExp(e@Geq(e1, e2)) = evalTypedExp(e, type(e1))
  evalTypedExp(Geq(e1, e2), [INT()]) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    if #int-geq(v1, v2) then {
      cont@([$true])
    } else {
      cont@([$false])
    }
  } label cont/1:
  evalTypedExp(Geq(e1, e2), [STRING()]) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    cmp <- #str-cmp(v1, v2)
    if #int-geq(cmp, int('0)) then {
      cont@([$true])
    } else {
      cont@([$false])
    }
  } label cont/1:
  
  evalExp(e@Leq(e1, e2)) = evalTypedExp(e, type(e1))
  evalTypedExp(Leq(e1, e2), [INT()]) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    if #int-leq(v1, v2) then {
      cont@([$true])
    } else {
      cont@([$false])
    }
  } label cont/1:
  evalTypedExp(Leq(e1, e2), [STRING()]) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    cmp <- #str-cmp(v1, v2)
    if #int-leq(cmp, int('0)) then {
      cont@([$true])
    } else {
      cont@([$false])
    }
  } label cont/1:
  
  // Logic
  
  evalExp(And(e1, e2)) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    if #int-neq(v1, $false) then {
      if #int-neq(v2, $false) then {
        cont@([$true])
      } else {
        cont@([$false])
      }
    } else {
      cont@([$false])
    }
  } label cont/1:
  
  evalExp(Or(e1, e2)) = {
    v1 <- evalExp(e1)
    v2 <- evalExp(e2)
    if #int-leq(v1, v2) then {
      cont@([$true])
    } else {
      if #int-neq(v2, $false) then {
        cont@([$true])
      } else {
        cont@([$false])
      }
    }
  } label cont/1:

  // Arrays
  
  evalExp(Array(_, e1, e2)) = {
    count <- evalExp(e1)
    initVal <- evalExp(e2)
    loop <- fresh-var(loop)
    i <- fresh-var(i)
    arr <- fresh-var(i)
    empty <- #array-new([])
    fix {
      fun loop([i, arr]) = {
        if #int-lt(i, count) then {
          new_part <- #array-new([initVal])
          i_plus <- #int-add(i, int('1))
          new_arr <- #array-concat(arr, new_part)
          loop@([i_plus, new_arr])
        } else
          cont@([arr])
      }
    }
    loop@([int('0), empty])
  } label cont/1:

  evalExp(LValue2Exp(Subscript(lval, e))) = {
    arr <- evalExp('LValue2Exp(lval))
    index <- evalExp(e)
    #array-read(arr, index)
  }

  evalExp(Assign(Subscript(lval, e1), e2)) = {
    arr <- evalExp('LValue2Exp(lval))
    index <- evalExp(e1)
    val <- evalExp(e2)
    #array-write(arr, index, val)
    $unit
  }

  // Records

  evalExp(r@Record(x, fields)) = {
    frame <- create-scope!(r, ['"main!field"])
    evalFields(fields)
    frame
  }

  evalFields :: List('InitField) -> Pluggable
  evalFields([]) = hole
  evalFields([InitField(x, e)|t]) = {
    v <- evalExp(e)
    write-var!(x, v)
    evalFields(t)
  }

  evalExp(LValue2Exp(f@FieldVar(lval, x))) = {
    frame <- evalExp('LValue2Exp(lval))
    use-scope!(f, frame)
    read-var!(x)
  }

  evalExp(Assign(f@FieldVar(lval, x), e)) = {
    frame <- evalExp('LValue2Exp(lval))
    val <- evalExp(e)
    use-scope!(f, frame)
    write-var!(x, val)
    $unit
  }

  // Variables

  evalExp(LValue2Exp(Var2LValue(Var(x)))) = read-var!(x)
  evalExp(Assign(Var2LValue(Var(x)), e)) = {
    val <- evalExp(e)
    write-var!(x, val)
    $unit
  }
  
  evalExps([h|t]) = {
    evalExp(h)
    evalExps(t)
  }
  evalExps([e]) = evalExp(e)
  evalExps([]) = $unit
  evalArgs([h|t]) = {
    hv <- evalExp(h)
    tv <- evalArgs(t)
    [hv|tv]
  }
  evalArgs([]) = []

  evalDecl(v@VarDec(x, t, e)) = {
    create-scope!(v, ['"main!var"])
    val <- evalExp(e)
    write-var!(x, val)
  }
  evalDecl(v@VarDecNoType(x, e)) = {
    create-scope!(v, ['"main!var"])
    val <- evalExp(e)
    write-var!(x, val)
  }
  
  paramsToVars :: List('FArg) -> List(@cval)
  paramsToVars([FArg(x, _)|t]) = [var(x)|paramsToVars(t)]
  paramsToVars([]) = []
  storeParams :: List('FArg) -> Pluggable
  storeParams([FArg(x, _)|t]) = {
    write-var!(x, var(x))
    storeParams(t)
  }
  storeParams([]) = hole
  
  evalDecl(d@ProcDec(x, params, e)) = {
    f <- var(x)
    cont <- fresh-var(cont)
    fix {
      fun f(paramsToVars(params) ++ [cont]) = {
        create-scope!(d, ['"main!var"])
        storeParams(params)
        evalExp(e)
        cont@([$unit])
      }
    }
    write-var!(x, f)
  }

  evalDecl(d@FunDec(x, params, _, e)) = {
    f <- var(x)
    cont <- fresh-var(cont)
    fix {
      fun f(paramsToVars(params) ++ [cont]) = {
        create-scope!(d, ['"main!var"])
        storeParams(params)
        result <- evalExp(e)
        cont@([result])
      }
    }
    write-var!(x, f)
  }

  evalDecl(TypeDec(_, _)) = hole  // NOOP, let statix handle this

  evalDecls([h|t]) = {
    evalDecl(h)
    evalDecls(t)
  }
  evalDecls([]) = hole